import os
from flask import Flask, render_template, request, jsonify, send_from_directory, url_for

import os
from werkzeug.middleware.dispatcher import DispatcherMiddleware
from werkzeug.serving import WSGIRequestHandler

# SCRIPT_NAME 환경변수 처리를 위한 미들웨어
class ScriptNameMiddleware:
    def __init__(self, app):
        self.app = app
    
    def __call__(self, environ, start_response):
        script_name = os.environ.get('SCRIPT_NAME', '')
        if script_name:
            environ['SCRIPT_NAME'] = script_name
            path_info = environ.get('PATH_INFO', '')
            if path_info.startswith(script_name):
                environ['PATH_INFO'] = path_info[len(script_name):]
        return self.app(environ, start_response)


app = Flask(__name__)

# WSGI 미들웨어 적용
app.wsgi_app = ScriptNameMiddleware(app.wsgi_app)

# 프로덕션 환경에서 APPLICATION_ROOT 설정
if os.environ.get('FLASK_ENV') == 'production':
    app.config['APPLICATION_ROOT'] = '/challenges/cookie_ctf'
    app.config['PREFERRED_URL_SCHEME'] = 'http'

# 기존 코드 유지하면서 static 경로 수정
@app.route('/static/<path:filename>')
def custom_static(filename):
    return send_from_directory(app.static_folder, filename)

@app.route("/")
def index():
    resp = make_response("""
        <h1>쿠키 확인기(Cookie Checker)에 오신 것을 환영합니다!</h1>
        <p>오직 관리자만 플래그를 볼 수 있습니다. <a href='flag'>/flag</a>에 접근해 보세요.</p>
    """)
    if not request.cookies.get("is_admin"):
        resp.set_cookie("is_admin", "False")
    return resp

@app.route("/flag")
def flag():
    is_admin = request.cookies.get("is_admin", "False")
    if is_admin == "True":
        flag = get_flag()
        return f"<h1>플래그: {flag}</h1>"
    else:
        return "<h1>접근 거부됨. 당신은 관리자가 아닙니다.</h1>", 403

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5000, debug=False)
 